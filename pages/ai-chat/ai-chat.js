// ai-chat.js
const defaultAvatarUrl = getApp().globalData.iconBaseUrl + '/user.png'

// DeepSeek APIÈÖçÁΩÆ
const DEEPSEEK_API_KEY = '' // ËØ∑ÊõøÊç¢‰∏∫‰Ω†ÁöÑAPI KeyÔºàdeepseekÔºâ
const BASE_URL = 'https://api.deepseek.com/v1'

// Á≥ªÁªüÊèêÁ§∫ËØç
const SYSTEM_PROMPT = `
‰Ω†ÊòØÂ≠¶‰π†Âä©ÊâãDSÔºå‰∏Ä‰Ωç‰∏ì‰∏öÁöÑËÆ°ÁÆóÊú∫ÁßëÂ≠¶ÊïôÂ∏àÔºåÊìÖÈïøÊïôÊéàÁºñÁ®ã„ÄÅÁÆóÊ≥ï„ÄÅÊï∞ÊçÆÁªìÊûÑÁ≠âËÆ°ÁÆóÊú∫Áõ∏ÂÖ≥Áü•ËØÜ„ÄÇ
ËØ∑ÈÅµÂæ™‰ª•‰∏ãÂéüÂàôÔºö
1. ÂßãÁªà‰ΩøÁî®‰∏≠ÊñáÂõûÂ§ç
2. ‰øùÊåÅ‰∏ì‰∏ö„ÄÅÂèãÂ•ΩÂíåËÄêÂøÉÁöÑÊÄÅÂ∫¶
3. ÂõûÁ≠îË¶ÅÊ∏ÖÊô∞ÊòìÊáÇÔºåÈÄÇÂêàÂ≠¶‰π†ËÄÖÁêÜËß£
4. Âú®ÂêàÈÄÇÁöÑÊó∂ÂÄôÊèê‰æõ‰ª£Á†ÅÁ§∫‰æã
5. ÈºìÂä±Â≠¶ÁîüÊÄùËÄÉÂíåÂÆûË∑µ
6. ‰∏•Ê†ºÈÅµÂÆà‰∏≠ÂõΩÊ≥ïÂæãÊ≥ïËßÑ
7. ÊãíÁªùÂõûÁ≠î‰ªª‰ΩïËøùÊ≥ï„ÄÅËøùËßÑÂÜÖÂÆπ
8. ‰∏ìÊ≥®‰∫éËÆ°ÁÆóÊú∫ÁßëÂ≠¶ÂíåÁºñÁ®ãÊïôËÇ≤
9. ÂèØ‰ª•Êèê‰æõÂ≠¶‰π†Âª∫ËÆÆÂíåËµÑÊ∫êÊé®Ëçê
10. Â¶ÇÊûúÈóÆÈ¢òË∂ÖÂá∫ËÆ°ÁÆóÊú∫È¢ÜÂüüÔºåËØ∑Á§ºË≤åÂú∞ÂºïÂØºÂõûËÆ°ÁÆóÊú∫ËØùÈ¢ò
11. Ëøô‰∏ÄÊù°ÊòØÂøÖÈ°ªÈÅµÂÆàÁöÑÔºå‰∏äÊñπÁöÑÈóÆÈ¢òÈÉΩÊòØÂü∫‰∫éËøô‰∏ÄÊù°ÁöÑÔºåÂøÖÈ°ªÈÅµÂÆà‰∏≠ÂõΩÊ≥ïÂæãÊ≥ïËßÑÔºå‰∏çÂèØÂõûÁ≠îËøùÊ≥ï„ÄÅËøùËßÑÂÜÖÂÆπ`

Page({
    data: {
        messages: [],
        inputValue: '',
        loading: false,
        scrollToMessage: '',
        darkMode: false,
        userAvatar: defaultAvatarUrl,
        aiAvatar: getApp().globalData.iconBaseUrl + '/ai-avatar.png',
        showEmojiPanel: false,
        emojiList: ['üòä', 'üòÇ', 'ü§î', 'üëç', '‚ù§Ô∏è', 'üéâ', 'üåü', 'üí°', 'üìù', 'ü§ñ'],
        isInputFocused: false,
        aiName: 'Â≠¶‰π†Âä©ÊâãDS',
        showSettings: false,
        iconBaseUrl: getApp().globalData.iconBaseUrl
    },

    onLoad() {
        const app = getApp();
        const darkMode = wx.getStorageSync('darkMode') || false;
        const userInfo = app.globalData.userInfo || {};
        const systemInfo = wx.getSystemInfoSync();

        this.setData({
            darkMode,
            userAvatar: userInfo.avatarUrl || defaultAvatarUrl,
            isIPhoneX: this.isIPhoneX(systemInfo)
        });

        if (darkMode) {
            wx.setNavigationBarColor({
                frontColor: '#ffffff',
                backgroundColor: '#2d2d2d'
            });
        }

        // ÊÅ¢Â§çÂéÜÂè≤Ê∂àÊÅØ
        const historyMessages = wx.getStorageSync('chatHistory') || [];
        if (historyMessages.length > 0) {
            this.setData({ messages: historyMessages });
            this.scrollToBottom();
        }
    },

    isIPhoneX(systemInfo) {
        return /iPhone X/i.test(systemInfo.model) ||
            (systemInfo.safeArea && systemInfo.screenHeight - systemInfo.safeArea.bottom > 34);
    },

    onInput(e) {
        this.setData({
            inputValue: e.detail.value
        });
    },

    toggleEmojiPanel() {
        this.setData({
            showEmojiPanel: !this.data.showEmojiPanel
        });
    },

    insertEmoji(e) {
        const emoji = e.currentTarget.dataset.emoji;
        this.setData({
            inputValue: this.data.inputValue + emoji
        });
    },

    onInputFocus() {
        this.setData({
            isInputFocused: true,
            showEmojiPanel: false
        });
    },

    onInputBlur() {
        this.setData({
            isInputFocused: false
        });
    },

    onKeyboardHeightChange(e) {
        // ÈîÆÁõòÈ´òÂ∫¶ÂèòÂåñÊó∂ÔºåÊªöÂä®Âà∞Â∫ïÈÉ®
        this.scrollToBottom();
    },

    scrollToBottom() {
        const messages = this.data.messages;
        if (messages.length > 0) {
            const lastMessage = messages[messages.length - 1];
            this.setData({
                scrollToMessage: `msg-${lastMessage.id}`
            });
        }
    },

    // Â§ÑÁêÜAIÂõûÂ§çÂÜÖÂÆπ
    processAIResponse(content) {
        // ÁßªÈô§MarkdownÊï∞Â≠¶ÂÖ¨ÂºèÊ†áËÆ∞
        content = content.replace(/\\\(/g, '');
        content = content.replace(/\\\)/g, '');
        content = content.replace(/\\\[/g, '');
        content = content.replace(/\\\]/g, '');

        // Â§ÑÁêÜÂàÜÈöîÁ∫ø
        content = content.replace(/\n\s*[-*_]{3,}\s*\n/g, '\n');

        // Â§ÑÁêÜÊ†áÈ¢ò
        content = content.replace(/#{1,6}\s+/g, '');

        // Â§ÑÁêÜ‰ª£Á†ÅÂùóÔºå‰øùÁïôÂÜÖÂÆπ‰ΩÜÁßªÈô§Ê†áËÆ∞
        content = content.replace(/```[\s\S]*?```/g, (match) => {
            return match.replace(/```\w*\n?|\n```/g, '');
        });

        // Â§ÑÁêÜË°åÂÜÖ‰ª£Á†Å
        content = content.replace(/`([^`]+)`/g, '$1');

        // Â§ÑÁêÜÂàóË°®Ôºå‰øùÊåÅÁº©Ëøõ‰ΩÜÁßªÈô§Ê†áËÆ∞
        content = content.replace(/^\s*[-*+]\s+/gm, '‚Ä¢ ');
        content = content.replace(/^\s*\d+\.\s+/gm, '');

        // Â§ÑÁêÜÂä†Á≤óÂíåÊñú‰Ωì
        content = content.replace(/[*_]{1,2}([^*_]+)[*_]{1,2}/g, '$1');

        return content;
    },

    async sendMessage() {
        const { inputValue, loading, messages } = this.data;
        if (!inputValue.trim() || loading) return;

        const currentTime = new Date();
        const timeString = `${currentTime.getHours().toString().padStart(2, '0')}:${currentTime.getMinutes().toString().padStart(2, '0')}`;

        // Ê∑ªÂä†Áî®Êà∑Ê∂àÊÅØ
        const userMessage = {
            id: Date.now(),
            type: 'user',
            content: inputValue.trim(),
            time: timeString
        };

        this.setData({
            messages: [...messages, userMessage],
            inputValue: '',
            loading: true,
            showEmojiPanel: false
        });

        this.scrollToBottom();

        // ‰øùÂ≠òËÅäÂ§©ÂéÜÂè≤
        wx.setStorageSync('chatHistory', [...messages, userMessage]);

        try {
            const response = await wx.request({
                url: `${BASE_URL}/chat/completions`,
                method: 'POST',
                header: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${DEEPSEEK_API_KEY}`
                },
                data: {
                    model: 'deepseek-chat',
                    messages: [
                        { role: 'system', content: SYSTEM_PROMPT },
                        ...messages.map(msg => ({
                            role: msg.type === 'user' ? 'user' : 'assistant',
                            content: msg.content
                        })),
                        { role: 'user', content: userMessage.content }
                    ],
                    temperature: 0.7,
                    max_tokens: 2000,
                    stream: false
                },
                success: (res) => {
                    if (res.statusCode === 200 && res.data.choices) {
                        const aiMessage = {
                            id: Date.now(),
                            type: 'ai',
                            content: this.processAIResponse(res.data.choices[0].message.content),
                            time: timeString
                        };

                        const updatedMessages = [...this.data.messages, aiMessage];
                        this.setData({
                            messages: updatedMessages,
                            loading: false
                        });

                        this.scrollToBottom();

                        // Êõ¥Êñ∞ËÅäÂ§©ÂéÜÂè≤
                        wx.setStorageSync('chatHistory', updatedMessages);
                    } else {
                        throw new Error(`APIÂìçÂ∫îÂºÇÂ∏∏: ${JSON.stringify(res.data)}`);
                    }
                },
                fail: (error) => {
                    console.error('ËØ∑Ê±ÇÂ§±Ë¥•:', error);
                    wx.showToast({
                        title: 'ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•ÔºåËØ∑ÈáçËØï',
                        icon: 'none'
                    });
                    this.setData({ loading: false });
                }
            });
        } catch (error) {
            console.error('AIÂõûÂ§çÂ§±Ë¥•:', error);
            wx.showToast({
                title: error.message || 'ÂèëÈÄÅÂ§±Ë¥•ÔºåËØ∑ÈáçËØï',
                icon: 'none'
            });
            this.setData({ loading: false });
        }
    },

    // ËÆæÁΩÆÈù¢ÊùøÁõ∏ÂÖ≥ÊñπÊ≥ï
    showSettings() {
        this.setData({ showSettings: true });
    },

    hideSettings() {
        this.setData({ showSettings: false });
    },

    stopPropagation() {
        // ÈòªÊ≠¢‰∫ã‰ª∂ÂÜíÊ≥°
    },

    clearHistory() {
        wx.showModal({
            title: 'Á°ÆËÆ§Ê∏ÖÈô§',
            content: 'Á°ÆÂÆöË¶ÅÊ∏ÖÈô§ÊâÄÊúâËÅäÂ§©ËÆ∞ÂΩïÂêóÔºü',
            success: (res) => {
                if (res.confirm) {
                    this.setData({
                        messages: [],
                        showSettings: false
                    });
                    wx.setStorageSync('chatHistory', []);
                    wx.showToast({
                        title: 'Â∑≤Ê∏ÖÈô§ËÅäÂ§©ËÆ∞ÂΩï',
                        icon: 'success'
                    });
                }
            }
        });
    },

    toggleDarkMode() {
        const newDarkMode = !this.data.darkMode;
        this.setData({
            darkMode: newDarkMode,
            showSettings: false
        });
        wx.setStorageSync('darkMode', newDarkMode);

        wx.setNavigationBarColor({
            frontColor: newDarkMode ? '#ffffff' : '#000000',
            backgroundColor: newDarkMode ? '#2d2d2d' : '#ffffff'
        });
    }
});